// @generated by protoc-gen-es v2.2.5 with parameter "target=ts,import_extension=ts"
// @generated from file streaming.proto (package streaming, edition 2023)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "npm:@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "npm:@bufbuild/protobuf/codegenv1";
import type { Message } from "npm:@bufbuild/protobuf";

/**
 * Describes the file streaming.proto.
 */
export const file_streaming: GenFile = /*@__PURE__*/
  fileDesc("Cg9zdHJlYW1pbmcucHJvdG8SCXN0cmVhbWluZyIcCghJbml0aWF0ZRIQCgh0cmFja19pZBgBIAEoBCJIChBJbml0aWF0ZVJlc3BvbnNlEiQKBHR5cGUYASABKA4yFi5zdHJlYW1pbmcuUmVwb25zZVR5cGUSDgoGbGVuZ3RoGAIgASgNIiwKC1BvbGxSZXF1ZXN0Eg0KBWluZGV4GAEgASgNEg4KBmxlbmd0aBgCIAEoDSJCCgxQb2xsUmVzcG9uc2USJAoEdHlwZRgBIAEoDjIWLnN0cmVhbWluZy5SZXBvbnNlVHlwZRIMCgRkYXRhGAMgASgMIgUKA0VuZCqIAQoLUmVwb25zZVR5cGUSHAoYUkVQT05TRV9UWVBFX1VOU1BFQ0lGSUVEEAASGAoUUkVQT05TRV9UWVBFX1NVQ0NFU1MQARIhCh1SRVBPTlNFX1RZUEVfRkFJTEVEX1RPX0xPQ0FURRACEh4KGlJFUE9OU0VfVFlQRV9PVVRfT0ZfQk9VTkRTEANiCGVkaXRpb25zcOgH");

/**
 * @generated from message streaming.Initiate
 */
export type Initiate = Message<"streaming.Initiate"> & {
  /**
   * id of track
   *
   * @generated from field: uint64 track_id = 1;
   */
  trackId: bigint;
};

/**
 * Describes the message streaming.Initiate.
 * Use `create(InitiateSchema)` to create a new message.
 */
export const InitiateSchema: GenMessage<Initiate> = /*@__PURE__*/
  messageDesc(file_streaming, 0);

/**
 * @generated from message streaming.InitiateResponse
 */
export type InitiateResponse = Message<"streaming.InitiateResponse"> & {
  /**
   * @generated from field: streaming.ReponseType type = 1;
   */
  type: ReponseType;

  /**
   * length of the track
   *
   * @generated from field: uint32 length = 2;
   */
  length: number;
};

/**
 * Describes the message streaming.InitiateResponse.
 * Use `create(InitiateResponseSchema)` to create a new message.
 */
export const InitiateResponseSchema: GenMessage<InitiateResponse> = /*@__PURE__*/
  messageDesc(file_streaming, 1);

/**
 * @generated from message streaming.PollRequest
 */
export type PollRequest = Message<"streaming.PollRequest"> & {
  /**
   * the byte index
   *
   * @generated from field: uint32 index = 1;
   */
  index: number;

  /**
   * the length of the chunk in bytes
   *
   * @generated from field: uint32 length = 2;
   */
  length: number;
};

/**
 * Describes the message streaming.PollRequest.
 * Use `create(PollRequestSchema)` to create a new message.
 */
export const PollRequestSchema: GenMessage<PollRequest> = /*@__PURE__*/
  messageDesc(file_streaming, 2);

/**
 * @generated from message streaming.PollResponse
 */
export type PollResponse = Message<"streaming.PollResponse"> & {
  /**
   * if failed
   *
   * @generated from field: streaming.ReponseType type = 1;
   */
  type: ReponseType;

  /**
   * @generated from field: bytes data = 3;
   */
  data: Uint8Array;
};

/**
 * Describes the message streaming.PollResponse.
 * Use `create(PollResponseSchema)` to create a new message.
 */
export const PollResponseSchema: GenMessage<PollResponse> = /*@__PURE__*/
  messageDesc(file_streaming, 3);

/**
 * @generated from message streaming.End
 */
export type End = Message<"streaming.End"> & {
};

/**
 * Describes the message streaming.End.
 * Use `create(EndSchema)` to create a new message.
 */
export const EndSchema: GenMessage<End> = /*@__PURE__*/
  messageDesc(file_streaming, 4);

/**
 * @generated from enum streaming.ReponseType
 */
export enum ReponseType {
  /**
   * @generated from enum value: REPONSE_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: REPONSE_TYPE_SUCCESS = 1;
   */
  SUCCESS = 1,

  /**
   * @generated from enum value: REPONSE_TYPE_FAILED_TO_LOCATE = 2;
   */
  FAILED_TO_LOCATE = 2,

  /**
   * @generated from enum value: REPONSE_TYPE_OUT_OF_BOUNDS = 3;
   */
  OUT_OF_BOUNDS = 3,
}

/**
 * Describes the enum streaming.ReponseType.
 */
export const ReponseTypeSchema: GenEnum<ReponseType> = /*@__PURE__*/
  enumDesc(file_streaming, 0);

